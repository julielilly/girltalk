---
const { procentage1, text1, procentage2, text2, procentage3, text3, backgroundColor, textColor, circle1, circle2, circle3 } = Astro.props;
---

<article class="item">
    <div class="statistic">
        <div class="diagram diagram1" ><div class="diagram_center" ></div></div>
        <p><span>{procentage1}</span> {text1}</p>
    </div>
    <div class="statistic">
        <p><span>{procentage2}</span> {text2}</p>
        <div class="diagram diagram2"><div class="diagram_center" ></div></div>
    </div>
    <div class="statistic">
        <div class="diagram diagram3"><div class="diagram_center" ></div></div>
        <p><span>{procentage3}</span> {text3}</p>
    </div>

    <script>
        //find cirkler
        const circles = document.querySelectorAll(".diagram")

        console.log(circles)

        //start funktion ved scroll
        window.addEventListener('scroll', showEffect);

        //funktion til scroll
        function showEffect() {
            
                const triggerBottom = window.innerHeight - 200;
                console.log({ triggerBottom })

                //find de enkelte circles 
                circles.forEach(circle => {
                        const circleTop = circle.getBoundingClientRect().top;
                        const circleBottom = circle.getBoundingClientRect().bottom;
                        const circleHeight = circle.getBoundingClientRect().height;


                        console.log({ circle, circleTop });
                        console.log({ circle, circleBottom });

                        //hvis toppen af cirklen kommer op forbi bunden af vinduet, trigger animation

                        if (circleTop < triggerBottom && circleTop > -circleHeight + 100) {
                                //tilf√∏j klasse til animation
                                if (circle.classList.contains('diagram1'))
                                    circle.classList.add('diagram1_effect')
                                else if (circle.classList.contains('diagram2'))
                                    circle.classList.add('diagram2_effect')
                                else if (circle.classList.contains('diagram3'))
                                    circle.classList.add('diagram3_effect')
                        }
                        if (circleBottom < 100 || circleTop > triggerBottom) {
                                //fjerner klasse til animation
                                if (circle.classList.contains('diagram1'))
                                    circle.classList.remove('diagram1_effect')
                                else if (circle.classList.contains('diagram2'))
                                    circle.classList.remove('diagram2_effect')
                                else if (circle.classList.contains('diagram3'))
                                    circle.classList.remove('diagram3_effect')

                        }
                });

        }

</script>
</article>

<style define:vars={{ textColor, backgroundColor, circle2, circle1, circle3 }}>

article {
    background-color: var(--backgroundColor);
    padding: 25vh 0;

    display: flex;
    flex-direction: column;
    gap: 32px;
    align-items: center;
}

span {
    color: var(--Love_red);
    font-weight: 600;
    font-size: 1.2rem;
}

p {
    font-variation-settings: "wdth" 125;
    width: 90%;
    color: var(--textColor);
}
p:nth-child(1) {
    text-align: right;
}


.diagram {
    display: flex;
    height: 100px;
    width: 100px;
    border-radius: 50%;
    background: conic-gradient(
        var(--Hug_me_pink) var(--a),
        var(--Dreamy_white) 0deg
    );
    --a:0deg;
    transition:--a 0.5s;
}
@property --a {
  syntax: '<angle>';
  inherits: false;
  initial-value: 0deg;
}

.diagram_effect {
  --a: 180deg;
}

.diagram1_effect {
  --a: var(--circle1);
}
.diagram1:hover {
  --a: var(--circle1);
}
.diagram2_effect {
  --a: var(--circle2);
}
.diagram2:hover {
  --a: var(--circle2);
}
.diagram3_effect {
  --a: var(--circle3);
}
.diagram3:hover {
  --a: var(--circle3);
}

.diagram_center {
    width: 100px;
    display: flex;
    justify-content: center;
    align-items: center;
}

.diagram_center::after {
    content: '';
    position: absolute;
    height: 70px;
    width: 70px;
    border-radius: 50%;
    background-color: var(--backgroundColor);
}

.statistic {
    width: 90vw;
    max-width: 650px;
    grid-column: 1/5;
    display: flex;
    flex-direction: row;
    gap: 32px;
    
    align-items: center;
}

@media screen and (min-width: 800px) {
    .statistic {
    width: 90vw;
    max-width: 650px;
    grid-column: 1/13;
    display: flex;
    flex-direction: row;
    gap: 32px;
    
    article {
    padding: 0;
  }
}


</style>